name: CI-Autobuild
on: [push]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9']
        include:
          # includes a new variable of npm with a value of 6
          # for the matrix leg matching the os and version
          - os: macos-latest
            pyinstaller: --osx-bundle-identifier de.jfeil.RegeltestCreator --windowed


    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}.dev${increment}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }} # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified      - run: pip install -r requirements.txt
      - if: matrix.os == 'windows-latest'
        run: echo __version__=`"${{ steps.version.outputs.version }}`" > src/__version__.py
      - if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: echo __version__=\"${{ steps.version.outputs.version }}\" > src/__version__.py
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller RegeltestCreator.pyw -F ${{ matrix.pyinstaller }}
      - if: matrix.os == 'macos-latest'
        run: |
          zip -r dist/RegeltestCreator.app.zip dist/RegeltestCreator.app
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Debug Release ${{ steps.version.outputs.version }}
          body: |
            ${{ github.event.commits[0].message }}
          draft: false
          prerelease: true
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: matrix.os == 'macos-latest'
        with:
          name: debug-apple
          path: dist/*.app.zip
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
          name: debug-windows
          path: dist/*.exe
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          name: debug-ubuntu
          path: dist/*
      - name: Upload Release Asset
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.os == 'ubuntu-latest'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: dist/RegeltestCreator
          asset_name: RegeltestCreator
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.os == 'macos-latest'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: dist/RegeltestCreator.app.zip
          asset_name: RegeltestCreator.app.zip
          asset_content_type: application/zip
      - name: Upload Release Asset
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.os == 'windows-latest'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: dist/RegeltestCreator.exe
          asset_name: RegeltestCreator.exe
          asset_content_type: application/vnd.microsoft.portable-executable

